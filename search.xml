<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>最全的—— ES6有哪些新特性？</title>
      <link href="/posts/66744729.html"/>
      <url>/posts/66744729.html</url>
      
        <content type="html"><![CDATA[<h1 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h1><h2 id="1、let和const"><a href="#1、let和const" class="headerlink" title="1、let和const"></a>1、let和const</h2><p>前面讲过：<a href="https://blog.csdn.net/ZLJ_999/article/details/123960186">https://blog.csdn.net/ZLJ_999/article/details/123960186</a></p><h2 id="2、symbol"><a href="#2、symbol" class="headerlink" title="2、symbol"></a>2、symbol</h2><p>Symbol是ES6中引入的一种新的基本数据类型，用于表示一个独一无二的值，不能与其他数据类型进行运算。它是JavaScript中的第七种数据类型，与undefined、null、Number（数值）、String（字符串）、Boolean（布尔值）、Object（对象）并列。</p><p>你可以这样创建一个Symbol值：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Symbol()</span><span class="token comment">//因为Symbol是基本数据类型，而不是对象，不能 new 。</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错，Symbol is not a constructor</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用Symbol()创建一个Symbol类型的值并赋值给a变量后，你就得到了一个在内存中独一无二的值。现在除了通过变量a，任何人在任何作用域内都无法重新创建出这个值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>内存解构图<br><img src="https://img-blog.csdnimg.cn/b6619bbd2c6a476ab9f3b7c20141358b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYWRtaW5femxq,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="3、模板字符串"><a href="#3、模板字符串" class="headerlink" title="3、模板字符串"></a>3、模板字符串</h2><ul><li>在ES6之前，处理模板字符串：<pre><code>   通过“\”和“+”来构建模板</code></pre></li><li>对ES6来说:<br>用<code>${}</code>来界定；<br>反引号<code>(``)</code>直接搞定；<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>      url<span class="token operator">=</span><span class="token string">"xxxxxx"</span>       <span class="token comment">// es6之前</span>       <span class="token keyword">let</span> html<span class="token operator">=</span><span class="token string">"&lt;div&gt;"</span><span class="token operator">+</span>                  <span class="token string">" &lt;a&gt;"</span><span class="token operator">+</span>url<span class="token operator">+</span><span class="token string">"&lt;/a&gt;"</span><span class="token operator">+</span>               <span class="token string">"&lt;/div&gt;"</span><span class="token punctuation">;</span><span class="token comment">//es6</span>       <span class="token keyword">let</span> eshtml<span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;                   &lt;a&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/a&gt;               &lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>非常好用<h3 id="3-1-字符串新方法（补充）"><a href="#3-1-字符串新方法（补充）" class="headerlink" title="3.1 字符串新方法（补充）"></a>3.1 字符串新方法（补充）</h3></li><li><code>includes()</code>判断字符串是否包含参数字符串，返回boolean值。</li><li><code>startsWith() / endsWith()</code>，判断字符串是否以参数字符串开头或结尾。返回boolean值。这两个方法可以有第二个参数，一个数字，表示开始查找的位置。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'blue,red,orange,white'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>repeat()</code>方法按指定次数返回一个新的字符串。<pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//'hellohello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><code>padStart()/padEnd()</code>，用参数字符串按给定长度从前面或后面补全字符串，返回新字符串。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token string">'hell'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//'hello'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//'helloo'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//'hell  ',如果没有指定将用空格代替</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//'ohell'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4、解构表达式"><a href="#4、解构表达式" class="headerlink" title="4、解构表达式"></a>4、解构表达式</h2><p>解构赋值是对赋值运算符的扩展。它是一种针对<strong>数组</strong>或者<strong>对象</strong>进行模式匹配，然后对其中的变量进行赋值。<br><strong>字符串</strong>、以及ES6新增的<strong>Map</strong>和<strong>Set</strong> 都可以使用解构表达式</p><h3 id="4-1-数组解构"><a href="#4-1-数组解构" class="headerlink" title="4.1 数组解构"></a>4.1 数组解构</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1,2,3</span> <span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1,undefined,3</span> <span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span><span class="token punctuation">,</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1,3</span> <span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//...是剩余运算符，表示赋值运算符右边除第一个值外剩余的都赋值给b</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1,[2,3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-对象解构"><a href="#4-2-对象解构" class="headerlink" title="4.2 对象解构"></a>4.2 对象解构</h3><p>对象的解构赋值和数组类似，不过左边的变量名需要使用对象的属性名，并且用大括号{}而非中括号[]</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">"ren"</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span> sex<span class="token operator">:</span> <span class="token string">"male"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//'ren' 12 'male'</span><span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> myName<span class="token punctuation">,</span> age<span class="token operator">:</span> myAge<span class="token punctuation">,</span> sex<span class="token operator">:</span> mySex <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span> <span class="token comment">//自定义变量名</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myName<span class="token punctuation">,</span> myAge<span class="token punctuation">,</span> mySex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//'ren' 12 'male'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、对象方面"><a href="#5、对象方面" class="headerlink" title="5、对象方面"></a>5、对象方面</h2><h3 id="5-1-Map和Set"><a href="#5-1-Map和Set" class="headerlink" title="5.1 Map和Set"></a>5.1 Map和Set</h3><p> Map和Set属于es6新增加的对象</p><h4 id="5-1-1-Map"><a href="#5-1-1-Map" class="headerlink" title="5.1.1 Map"></a>5.1.1 Map</h4><p>Map对象用于保存键值对，任何值JavaScript支持的值都可以作为一个键（key）或者一个值（value）。<br>与对象不同的是</p><ol><li>object的键只能是<strong>字符串</strong>或ES6的<strong>symbol</strong>值，而Map可以是任何值。</li><li>Map对象有一个<strong>size属性</strong>，存储了键值对的个数，而object对象没有类似属性。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'ren'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//{'name'=&gt;'ren','age'=&gt;12}</span>myMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'sex'</span><span class="token punctuation">,</span><span class="token string">'male'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//{'name'=&gt;'ren','age'=&gt;12,'sex'=&gt;'male'}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMap<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//3</span>myMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//'ren'</span>myMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span>myMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span>myMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span>myMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-1-2-Set"><a href="#5-1-2-Set" class="headerlink" title="5.1.2 Set"></a>5.1.2 Set</h4>可以理解为后端的Set集合对象<br>Set对象和Map对象类似，但它存储不是键值对。类似数组，但它的<strong>每个元素都是唯一的</strong>。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//里面要传一个数组，否则会报错</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mySet<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//{1,2,3}</span>mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mySet<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//{1,2,3,4}</span>mySet<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span>mySet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mySet<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//{2,3,4}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>利用Set对象<strong>唯一性</strong>的特点，可以轻松<strong>实现数组的去重</strong><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">let</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> newArr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>mySet<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[1,2,3,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="5-3-数组的新方法"><a href="#5-3-数组的新方法" class="headerlink" title="5.3 数组的新方法"></a>5.3 数组的新方法</h3><ul><li>新增的方法有：</li></ul><ol><li><code>Array.from()</code><strong>是内置对象Array的方法，实例数组不能调用</strong></li><li> <code>includes()</code>      参数：数值 ——– 返回值：<code>true/false</code></li><li><code>map()</code>、<code>filter()</code> 参数：函数——– 返回值：数组</li><li><code>forEach()</code>  参数：函数——– 返回值：<code>undefined</code></li><li><code>find()</code>   参数：函数——– 返回值：数值</li><li> <code>some()</code>、<code>every()</code> 参数：函数——– 返回值：<code>true/false</code></li></ol><hr><h4 id="5-3-1-Array-from-方法"><a href="#5-3-1-Array-from-方法" class="headerlink" title="5.3.1  Array.from()方法"></a>5.3.1  Array.from()方法</h4><p> <code>Array.from()</code>方法可以将可迭代对象转换为新的数组。</p><ul><li>  函数可接受3个参数（后两个参数可以没有）：<ul><li>第一个表示将被转换的可迭代对象(如果只有一个参数就是把形参转变成数组)</li><li>第二个是回调函数，将对每个数组元素应用该回调函数，然后返回新的值到新数组，</li><li>第三个是回调函数内this的指向。</li></ul></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">double</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 4, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-2-includes-方法"><a href="#5-3-2-includes-方法" class="headerlink" title="5.3.2 includes()方法"></a>5.3.2 includes()方法</h4><p>参数：数值 ——– 返回值：<code>true/false</code><br><code>includes()</code>方法——是查看数组中是否存在这个元素，存在就返回true,不存在就返回false</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token keyword">let</span> ary <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-3-3-map-、filter-方法"><a href="#5-3-3-map-、filter-方法" class="headerlink" title="5.3.3  map()、filter() 方法"></a>5.3.3  map()、filter() 方法</h4><p>参数：函数——– 返回值：数组<br> <code>map()</code>方法—–要利用原数组经过运算后的数组，或者从对象数组中拿某个属性<br> <code>filter()</code>方法——是将符合挑选的筛选出来成为一个新数组，新数组不会影响旧数组。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newarr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//newarr1-------[33, 44]</span><span class="token keyword">let</span> newarr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//newarr2-------[1, 33, 44, 2, 6, 9]</span><span class="token keyword">let</span> newarr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//newarr3-------[false, true, true, false, false, false]</span><span class="token keyword">let</span> newarr4 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//newarr4-------  [2, 66, 88, 4, 12, 18]</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-4-forEach-方法"><a href="#5-3-4-forEach-方法" class="headerlink" title="5.3.4 forEach()方法"></a>5.3.4 forEach()方法</h4><p>参数：函数——– 返回值：undefined</p><p><code>forEach()</code> 方法——是循环遍历数组中的每一项，没有返回值 </p><p><code>find()</code>方法———是查找数组中符合条件的第一个元素，直接将这个元素返回出来</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token keyword">let</span> a1<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">]</span><span class="token keyword">let</span> a2<span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> v <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-4-find-方法"><a href="#5-3-4-find-方法" class="headerlink" title="5.3.4  find()方法"></a>5.3.4  find()方法</h4><p>参数：函数——– 返回值：数值</p><p><code>find()</code>方法———-是查找数组中符合条件的第一个元素，直接将这个元素返回出来</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token keyword">let</span> a<span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> v <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 33</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-3-6-some-、every-方法"><a href="#5-3-6-some-、every-方法" class="headerlink" title="5.3.6 some()、every() 方法"></a>5.3.6 some()、every() 方法</h4><p>参数：函数——– 返回值：<code>true/false</code></p><p><code>some()</code>方法——找到<strong>一个符合</strong>条件的就返回<code>true</code>,<strong>所有都不符合</strong>返回<code>false</code>。<br><code>every()</code>方法——数组<strong>所有值都符合</strong>条件才会返回<code>true</code>,<strong>有一个不符合</strong>返回<code>false</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token keyword">let</span> newarr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> v <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newarr<span class="token punctuation">)</span> <span class="token comment">//true</span><span class="token keyword">let</span> newarr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> v <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newarr2<span class="token punctuation">)</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-object的新方法"><a href="#5-4-object的新方法" class="headerlink" title="5.4 object的新方法"></a>5.4 object的新方法</h3><p>在 ES6 中，添加了<code>Object.is()</code>、<code>Object.assign()</code>、<code>Object.keys()</code>、<code>Object.values()</code>、<code>Object.entries()</code>等方法。</p><h4 id="5-4-1-Object-is"><a href="#5-4-1-Object-is" class="headerlink" title="5.4.1 Object.is()"></a>5.4.1 Object.is()</h4><ul><li><code>Object.is()</code>方法用来判断两个值是否为同一个值，返回一个布尔类型的值。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token keyword">const</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> value1 <span class="token operator">=</span> obj3<span class="token punctuation">;</span><span class="token keyword">const</span> value2 <span class="token operator">=</span> obj4<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-4-2-Object-assign"><a href="#5-4-2-Object-assign" class="headerlink" title="5.4.2 Object.assign()"></a>5.4.2 Object.assign()</h4><ul><li><code>Object.assign()</code>方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象，并返回目标对象。——难理解看实例</li></ul><p><strong>对象合并</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span><span class="token number">5</span> <span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//对象合并，把后面对像合并到第一个对象，对象里相同的属性会覆盖</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">,</span> obj3<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { a: 5, b: 2 , c:3}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-4-3-Object-keys-、Object-values-、Object-entries"><a href="#5-4-3-Object-keys-、Object-values-、Object-entries" class="headerlink" title="5.4.3 Object.keys()、Object.values()、Object.entries()"></a>5.4.3 Object.keys()、Object.values()、Object.entries()</h4><ul><li>Object.keys()  返回对象所有属性</li><li>Object.values() 返回对象所有属性值</li><li>Object.entries() 返回多个数组，每个数组是 key–value<br>不解释直接看例子<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>language<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"js"</span><span class="token punctuation">,</span> <span class="token string">"css"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[ 'name', 'age', 'language' ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[ 'admin', 12, [ 'java', 'js', 'css' ] ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* [                                                     ["name", "admin"],                                                     ["age", 12],                                                     ["language", ["java", "js", "css"]],                                                 ]; */</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-5-对象声明简写"><a href="#5-5-对象声明简写" class="headerlink" title="5.5 对象声明简写"></a>5.5 对象声明简写</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>      <span class="token keyword">let</span> name <span class="token operator">=</span><span class="token string">'admin'</span>      <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">20</span>      <span class="token comment">//es6之前</span>      <span class="token comment">// let person={</span>      <span class="token comment">//     name:name,</span>      <span class="token comment">//     age:age</span>      <span class="token comment">// }</span>      <span class="token comment">//es6  声明对象时的属性名与引用的变量名相同就可以省略</span>      <span class="token keyword">let</span> person<span class="token operator">=</span><span class="token punctuation">{</span>          name<span class="token punctuation">,</span>          age      <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="5-6-…-对象扩展符"><a href="#5-6-…-对象扩展符" class="headerlink" title="5.6 …(对象扩展符)"></a>5.6 …(对象扩展符)</h3><ol><li>拷贝对象（深拷贝）<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">let</span> person<span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>age<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>wife<span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">"迪丽热巴"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> person2<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">...</span>person<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token operator">===</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//{name: 'admin', age: 12, wife: {…}}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>合并对象<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> newObj <span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">...</span>obj1<span class="token punctuation">,</span><span class="token operator">...</span>obj2<span class="token punctuation">,</span><span class="token operator">...</span>obj3<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { a: 5, b: 2 , c:3}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、函数方面"><a href="#6、函数方面" class="headerlink" title="6、函数方面"></a>6、函数方面</h2><h3 id="6-1-参数默认值"><a href="#6-1-参数默认值" class="headerlink" title="6.1 参数默认值"></a>6.1 参数默认值</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token comment">// es6之前</span><span class="token comment">// function add(a, b) {</span><span class="token comment">//     if(!a) a=0</span><span class="token comment">//     if(!b) b=0</span><span class="token comment">// return a + b;</span><span class="token comment">// }</span><span class="token comment">//es6</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> x<span class="token operator">=</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> y<span class="token operator">=</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> z<span class="token operator">=</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//x=0, y=2, z=7</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-箭头函数"><a href="#6-2-箭头函数" class="headerlink" title="6.2 箭头函数"></a>6.2 箭头函数</h3>箭头函数实现了一种更加简洁的书写方式。箭头函数内部没有<code>arguments</code>，也没有<code>prototype</code>属性，所以不能用<code>new</code>关键字调用箭头函数。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token function-variable function">print</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token parameter">a</span> <span class="token operator">=&gt;</span> a <span class="token operator">*</span> a<span class="token punctuation">;</span><span class="token comment">//当只有一个参数时，括号可以省略，函数体只有单行return语句时，大括号也可以省略。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-箭头函数和普通函数最大的区别在于其内部this永远指向其父级对象的this。-重点"><a href="#6-3-箭头函数和普通函数最大的区别在于其内部this永远指向其父级对象的this。-重点" class="headerlink" title="6.3 箭头函数和普通函数最大的区别在于其内部this永远指向其父级对象的this。(重点)"></a>6.3 箭头函数和普通函数最大的区别在于其内部this永远指向其父级对象的this。(重点)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>     age<span class="token operator">:</span><span class="token number">456</span><span class="token punctuation">,</span>     <span class="token function-variable function">say</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//this指向window</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="7、class（类）"><a href="#7、class（类）" class="headerlink" title="7、class（类）　　"></a>7、class（类）　　</h2><p><code>class</code> 作为对象的模板被引入ES6，你可以通过 <code>class </code>关键字定义类。<code>class </code>的本质依然是一个函数。</p><ol><li>创建类<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">class</span> <span class="token class-name">person</span> <span class="token punctuation">{</span><span class="token comment">//关键字声明方式</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name              <span class="token punctuation">}</span>           <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">person</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//'hello'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>类的继承<br>类的继承通过<code>extends</code>关键字实现。<br>子类必须在<code>constructor</code>中调用<code>super()</code><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span>name<span class="token punctuation">;</span>   <span class="token comment">//'admin'</span>student<span class="token punctuation">.</span>sex<span class="token punctuation">;</span>    <span class="token comment">//'male'</span>student<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//'ren:12'</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8、promise和proxy"><a href="#8、promise和proxy" class="headerlink" title="8、promise和proxy"></a>8、promise和proxy</h2>讲不清楚，等我学会了，后面在讲<h2 id="9、模块化"><a href="#9、模块化" class="headerlink" title="9、模块化"></a>9、模块化</h2></li><li>导入</li></ol><ul><li>ES6使用关键字 <code>import </code>导入模块（文件），有两种常用的方式：<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> ‘模块名称’  <span class="token keyword">from</span>  ‘路径’；<span class="token keyword">import</span>  ‘路径’；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ol start="2"><li>导出</li></ol><ul><li><p>ES6 通过 export 和export default 导出模块。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'ren'</span><span class="token punctuation">,</span>age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//注意：变量需要用大括号包裹，然后才能向外输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>模块化优点 </p></li><li><pre><code>    1.防止命名冲突</code></pre></li><li><pre><code>     2.复用性强</code></pre></li></ul><hr><p> <font color="red" size="4"><strong>若本文对你有帮助  点个赞  点个关注</strong></font></p><font color="red" size="4"><hr><h1 id="总结——ES6思维导图"><a href="#总结——ES6思维导图" class="headerlink" title="总结——ES6思维导图"></a>总结——ES6思维导图</h1><p><img src="https://img-blog.csdnimg.cn/96e0abb18d3e446db28f686f2d00a017.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYWRtaW5femxq,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></font>]]></content>
      
      
      <categories>
          
          <category> es6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端——谈谈js对象的深复制与浅复制</title>
      <link href="/posts/ca73cfc.html"/>
      <url>/posts/ca73cfc.html</url>
      
        <content type="html"><![CDATA[<p> <font color="red" size="4"><strong>若本文对你有帮助 – 请点个赞或者关注吧</strong></font></p><font color="red" size="4"><hr><h1 id="1、引用赋值——浅复制"><a href="#1、引用赋值——浅复制" class="headerlink" title="1、引用赋值——浅复制"></a>1、引用赋值——浅复制</h1><blockquote><p><strong>缺点</strong>：改变复制的对象时，原对象也改变（实际是同一对象）</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">{</span>    name<span class="token operator">:</span><span class="token string">"admin"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2<span class="token operator">=</span>obj1 <span class="token comment">//只是把obj1指向堆内存的地址赋值给obj2</span>obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zlj'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/6e7410e3fe324bffac95e091e4f41fa0.png"><br> 直接赋值时，<code>obj1</code>只是把指向堆内存的地址赋值给<code>obj2</code>，指向的还是同一个对象，因此改变<code>obj2.name</code>时，实际上改变的也是<code>obj1</code></p><h1 id="2、es6-…扩展符-——-深复制（有缺陷）"><a href="#2、es6-…扩展符-——-深复制（有缺陷）" class="headerlink" title="2、es6 …扩展符 —— 深复制（有缺陷）"></a>2、es6 …扩展符 —— 深复制（有缺陷）</h1><blockquote><p><strong>优点</strong>：这种复制方式不会改变原对象</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">{</span>    name<span class="token operator">:</span><span class="token string">"admin"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">...</span>obj1<span class="token punctuation">}</span>obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zlj'</span><span class="token comment">//当我们改变obj2.name时，obj1没有被改变</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/b104ec5e2d0445cd93b91e8b9fdfaaac.png"></p><blockquote><p><strong>缺点</strong>：当对象里面在嵌套一个对象时，<strong>对内部对象的复制是浅复制</strong></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">{</span>    name<span class="token operator">:</span><span class="token string">"admin"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span>    move<span class="token operator">:</span><span class="token punctuation">{</span>like<span class="token operator">:</span><span class="token string">'吃'</span><span class="token punctuation">,</span>sport<span class="token operator">:</span><span class="token string">'篮球'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">...</span>obj1<span class="token punctuation">}</span>obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zlj'</span>obj2<span class="token punctuation">.</span>move<span class="token punctuation">.</span>like<span class="token operator">=</span><span class="token string">"喝"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/a892c49df6cf4bb28712781568362b7b.png"></p><blockquote><p>结果：改变的name没有影响原对象，但是内部的move对象是有影响的<br>es6 …扩展符这种方式也只是比浅复制多复制一层</p></blockquote><h1 id="3、json-parse-json-stringify方式——深复制（有缺陷）"><a href="#3、json-parse-json-stringify方式——深复制（有缺陷）" class="headerlink" title="3、json-parse  json-stringify方式——深复制（有缺陷）"></a>3、json-parse  json-stringify方式——深复制（有缺陷）</h1><blockquote><p><strong>优点</strong>：可以实现多层深复制</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">{</span>    name<span class="token operator">:</span><span class="token string">"admin"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span>    move<span class="token operator">:</span><span class="token punctuation">{</span> like<span class="token operator">:</span><span class="token string">'吃'</span><span class="token punctuation">,</span> sport<span class="token operator">:</span><span class="token string">'篮球'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//JSON.stringify()把对象转化成json字符串</span><span class="token comment">//JSON.parse()把json字符串还原成对象</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span>obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zlj'</span>obj2<span class="token punctuation">.</span>move<span class="token punctuation">.</span>like<span class="token operator">=</span><span class="token string">"喝"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/c55d9e317e134586a5a358b34c88f88b.png"></p><blockquote><p><strong>缺点</strong>：值为<code>undefined</code>的属性无法复制</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">{</span>    name<span class="token operator">:</span><span class="token string">"admin"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span>    sex<span class="token operator">:</span><span class="token keyword">undefined</span><span class="token punctuation">,</span>    move<span class="token operator">:</span><span class="token punctuation">{</span>        like<span class="token operator">:</span><span class="token string">'吃'</span><span class="token punctuation">,</span>        sport<span class="token operator">:</span><span class="token string">'篮球'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span>obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zlj'</span>obj2<span class="token punctuation">.</span>move<span class="token punctuation">.</span>like<span class="token operator">=</span><span class="token string">"喝"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/0afeb8174e384656956d96c3ab70acf1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYWRtaW5femxq,size_16,color_FFFFFF,t_70,g_se,x_16"><br>当sex的值undefined时，sex属性就没有被复制到obj2</p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>平时练习时，我们的数据不会很复杂，在实际开发中才会有非常复杂数据，这是我们就需要用到第三方的库来解决深复制问题。</p></font>]]></content>
      
      
      <categories>
          
          <category> JavaScript从入门到高级笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React创建项目报错：You are running `create-react-app` 5.0.0, which is behind the latest release (5.0.1).</title>
      <link href="/posts/886e11b8.html"/>
      <url>/posts/886e11b8.html</url>
      
        <content type="html"><![CDATA[<h4 id="使用React脚手架创建项目，报错："><a href="#使用React脚手架创建项目，报错：" class="headerlink" title="使用React脚手架创建项目，报错："></a>使用React脚手架创建项目，报错：</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">create<span class="token operator">-</span>react<span class="token operator">-</span>app app2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​            <img src="https://img-blog.csdnimg.cn/b6a5a2032ae149d99738ae6fd278aac2.png"><br><img src="https://img-blog.csdnimg.cn/4eb76b37c33340e8869a6c16810f6e89.png"></p><h4 id="如果您之前已create-react-app通过-全局安装"><a href="#如果您之前已create-react-app通过-全局安装" class="headerlink" title="如果您之前已create-react-app通过 全局安装"></a>如果您之前已create-react-app通过 全局安装</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm install <span class="token operator">-</span>g create<span class="token operator">-</span>react<span class="token operator">-</span>app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>意思是有新版本了，之前安装的版本低了</p><h4 id="1-可以先卸载"><a href="#1-可以先卸载" class="headerlink" title="1.可以先卸载"></a>1.可以先卸载</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm uninstall <span class="token operator">-</span>g create<span class="token operator">-</span>react<span class="token operator">-</span>app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-然后再使用npx临时安装："><a href="#2-然后再使用npx临时安装：" class="headerlink" title="2.然后再使用npx临时安装："></a>2.然后再使用npx临时安装：</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npx create<span class="token operator">-</span>react<span class="token operator">-</span>app my<span class="token operator">-</span>app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-如果还不行就加上版本号"><a href="#3-如果还不行就加上版本号" class="headerlink" title="3.如果还不行就加上版本号"></a>3.如果还不行就加上版本号</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npx create<span class="token operator">-</span>react<span class="token operator">-</span>app@5<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1 yourApp <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react跨域 http-proxy-middleware 无效还是404</title>
      <link href="/posts/9068ab30.html"/>
      <url>/posts/9068ab30.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h1><blockquote><p>今天用<code>http-proxy-middleware</code>的过程中，<code>setupProxy.js</code>文件配置好以后发出请求依然无效还是404</p></blockquote><p>​    <img src="https://img-blog.csdnimg.cn/9444da50435a486c9ce6992899de2d50.png"></p><h3 id="setupProxy-js文件"><a href="#setupProxy-js文件" class="headerlink" title="setupProxy.js文件"></a>setupProxy.js文件</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> createProxyMiddleware <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http-proxy-middleware"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/ajax"</span><span class="token punctuation">,</span><span class="token function">createProxyMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">{</span>target<span class="token operator">:</span> <span class="token string">"https://i.maoyan.com"</span><span class="token punctuation">,</span>changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>method<span class="token operator">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span>url<span class="token operator">:</span> <span class="token string">"/ajax/comingList?ci=236&amp;limit=10&amp;movieIds=&amp;token=&amp;optimus_uuid=53D982E0BB3411EC8ECD334B3F83289E1602AC03A72F45D3BF85074D843147F0&amp;optimus_risk_level=71&amp;optimus_code=10"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>1.首先看看是不是没有重启服务</p><p>2.如果重启还是没有解决</p><ul><li>打开<code>package.js</code></li><li>看一下<code>react-scripts</code>的版本如果低于2.0的话<code>http-proxy-middleware</code>是不支持的，我的就是版本太低，    改成了4.0版本就能请求成功了</li></ul><p>​    <img src="https://img-blog.csdnimg.cn/75723e91431f464a86744ebd53bdc4bf.png"></p><p>​    <img src="https://img-blog.csdnimg.cn/27036d9f1157422b9d31094a9ca3fece.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYWRtaW5femxq,size_20,color_FFFFFF,t_70,g_se,x_16"></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React创建项目出现ReactDOM.render is no longer supported in React 18警告，index.js修改</title>
      <link href="/posts/f31fcb1e.html"/>
      <url>/posts/f31fcb1e.html</url>
      
        <content type="html"><![CDATA[<p>当你第一次安装 React 18 时，你会在控制台中看到一个警告：<br><img src="https://img-blog.csdnimg.cn/0f3b482fb6894a3cab96cf1d77a36e2d.png"><br>因为在 React 18 中，<code>ReactDOM.render</code> 被废弃，当前发出警告，并以兼容模式运行。<br>只需要更改<code>index.js</code>文件即可<br> 改成下面这样警告就会消失:</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom/client"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App"</span><span class="token punctuation">;</span><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>废弃的方法还有很多</p><ul><li><code>react-dom</code>:<code>ReactDOM.render</code>已弃用。使用它会警告并在 React 17 模式下运行您的应用程序。</li><li><code> react-dom</code>:<code>ReactDOM.hydrate</code>已弃用。使用它会警告并在 React 17 模式下运行您的应用程序。</li><li> <code>react-dom</code>:<code>ReactDOM.unmountComponentAtNode</code>已弃用。</li><li><code>react-dom</code>:<code>ReactDOM.renderSubtreeIntoContainer</code>已弃用。</li><li> <code>react-dom/server</code>:<code>ReactDOMServer.renderToNodeStream</code>已弃用。</li></ul><p>具体参考官网：<a href="https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html#updates-to-client-rendering-apis">https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html#updates-to-client-rendering-apis</a></p><p>关注我！！！<br>关注我！！！<br>关注我！！！</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的JavaScript笔记——四、IIFE</title>
      <link href="/posts/4f36c419.html"/>
      <url>/posts/4f36c419.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、IIFE"><a href="#一、IIFE" class="headerlink" title="一、IIFE"></a>一、IIFE</h1><p>IIFE 全称：Immediately-Invoked Function Expression （立即调用函数表达式），别名：匿名函数自调用。<br>作用：</p><ul><li>隐藏内部实现</li><li>不会污染外部（全局）命名空间</li><li>用它来编码js模块</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//匿名函数自调用</span>         <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         window<span class="token punctuation">.</span><span class="token function-variable function">$</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">//向外暴露一个全局函数</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>                test<span class="token operator">:</span>test            <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">$</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//$是一个函数</span>                    <span class="token comment">//$执行后返回的是一个对象</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript从入门到高级笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的JavaScript笔记——三、事件对象event和 this关键字</title>
      <link href="/posts/96b2360e.html"/>
      <url>/posts/96b2360e.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、事件对象event"><a href="#一、事件对象event" class="headerlink" title="一、事件对象event"></a>一、事件对象event</h1><h2 id="1-1-什么是事件对象？"><a href="#1-1-什么是事件对象？" class="headerlink" title="1.1 什么是事件对象？"></a>1.1 什么是事件对象？</h2><blockquote><p>Event 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。</p></blockquote><blockquote><p>上面是官方说法，<strong>简单的说就是当你触发了一个事件以后，event对象存放了对该事件的一些描述信息。</strong></p></blockquote><p>列如：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span>    box<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>x<span class="token punctuation">)</span>   <span class="token comment">//  返回鼠标所点击位置的 X轴坐标点信息</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>y<span class="token punctuation">)</span>   <span class="token comment">//  返回鼠标所点击位置的 Y轴坐标点信息</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是<strong>鼠标点击事件</strong> 其实还存放了<br>点击时<strong>相对浏览器窗口的坐标</strong><br>以及<strong>相对整个页面的坐标</strong>等等。</p><p><em>如果是</em> <strong>键盘事件</strong> 哪个键被摁下也会在event对象中<br><em>如果是</em> <strong>鼠标滚轮事件</strong> 滚轮滑动距离也event对象中</p><h1 id="二、this-关键字"><a href="#二、this-关键字" class="headerlink" title="二、this 关键字"></a>二、this 关键字</h1><blockquote><p>在 JavaScript 中 this 不是固定不变的，它会随着执行环境的改变而改变。<br><code>this会变化就是它麻烦的原因</code></p></blockquote><p><font color="#FF6565">首先声明this在如何时候都指向一个对象</font></p><font color="#FF6565"><h2 id="2-1-在函数中，this-表示全局对象。"><a href="#2-1-在函数中，this-表示全局对象。" class="headerlink" title="2.1 在函数中，this 表示全局对象。"></a>2.1 在函数中，this 表示全局对象。</h2><blockquote><p>当调用函数时，函数内部会传入一个隐含的参数，这个隐含参数也就是<code>this</code></p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//此时的this就指向window对象</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//实质上window.f()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-在方法中，this-表示该方法所属的对象。"><a href="#2-2-在方法中，this-表示该方法所属的对象。" class="headerlink" title="2.2 在方法中，this 表示该方法所属的对象。"></a>2.2 在方法中，this 表示该方法所属的对象。</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span><span class="token string">'admin'</span><span class="token punctuation">,</span>    <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时的this就指向obj对象</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出admin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-在事件中，this-表示接收事件的元素。"><a href="#2-3-在事件中，this-表示接收事件的元素。" class="headerlink" title="2.3 在事件中，this 表示接收事件的元素。"></a>2.3 在事件中，this 表示接收事件的元素。</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">"this.style.display='none'"</span><span class="token operator">&gt;</span>点我后我就消失了<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token comment">//此时的this就指向button这个元素对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-call-和-apply-方法可以将-this-引用到任何对象。"><a href="#2-4-call-和-apply-方法可以将-this-引用到任何对象。" class="headerlink" title="2.4 call() 和 apply() 方法可以将 this 引用到任何对象。"></a>2.4 call() 和 apply() 方法可以将 this 引用到任何对象。</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">"我是p1的name"</span><span class="token punctuation">,</span>    <span class="token function-variable function">sayName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">"我是p2的name"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时的this就指向p1对象</span>p1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时的this就指向p2对象</span>p1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时的this就指向p2对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/98992b7045a94a0c96ac3a67220763a5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYWRtaW5femxq,size_16,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2.5 总结"></a>2.5 总结</h2><p> <strong><code>谁调用了函数，this就是谁。</code><br> 没有人调用this就指向window。<br> call()和apply()可以改变this指向。</strong></p></font>]]></content>
      
      
      <categories>
          
          <category> JavaScript从入门到高级笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的JavaScript笔记——二、事件的冒泡和捕获（重点）及如何取消冒泡</title>
      <link href="/posts/9202e118.html"/>
      <url>/posts/9202e118.html</url>
      
        <content type="html"><![CDATA[<h1 id="二、事件的冒泡和捕获（重点）"><a href="#二、事件的冒泡和捕获（重点）" class="headerlink" title="二、事件的冒泡和捕获（重点）"></a>二、事件的冒泡和捕获（重点）</h1><h2 id="1-什么是事件？"><a href="#1-什么是事件？" class="headerlink" title="1.什么是事件？"></a>1.什么是事件？</h2><blockquote><p>简单来说：<strong>就是用户与浏览器窗口发生交互的过程</strong>。列如：鼠标点击、鼠标滑入滑出、滚轮、键盘输入……</p></blockquote><h2 id="2-事件的冒泡"><a href="#2-事件的冒泡" class="headerlink" title="2.事件的冒泡"></a>2.事件的冒泡</h2><p>以烂大街的点击事件为例（代码简单就不写了看着也烦）</p><p><img src="https://img-blog.csdnimg.cn/7cf76ae0b4e046009c994200bde9763f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYWRtaW5femxq,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="2-1-什么是事件冒泡？"><a href="#2-1-什么是事件冒泡？" class="headerlink" title="2.1 什么是事件冒泡？"></a>2.1 什么是事件冒泡？</h3><blockquote><p>即当发生事件时，<strong>由最<code>内</code>部的元素接收，然后逐级向<code>上</code>传播</strong>。</p></blockquote><p>看上图<br>当我们点击 <code>a</code> 时<br><code>a</code> 会先响应并触发点击事件<br>然后 <code>p</code> 响应并触发点击事件<br>然后是  <code>li</code> =&gt; <code>ul</code> =&gt; <code>body</code> =&gt; <code>html</code> 逐级向上<br>这个过程就是事件的冒泡</p><h3 id="2-2-什么是事件捕获？"><a href="#2-2-什么是事件捕获？" class="headerlink" title="2.2 什么是事件捕获？"></a>2.2 什么是事件捕获？</h3><blockquote><p>即当发生事件时，<strong>由最<code>外</code>部的元素接收，然后逐级向<code>下</code>传播</strong>。</p></blockquote><p>捕获就是冒泡相反<br>当我们点击 <code>a</code> 时<br>最外层的 html 会先响应并触发点击事件<br>然后 <code>body</code> 响应并触发点击事件<br>然后是  <code>ul</code> =&gt; <code>li </code>=&gt; <code>p</code> =&gt;  <code>a</code> 逐级向下<br>这个过程就是事件的捕获</p><h3 id="2-3-如何取消冒泡呢？"><a href="#2-3-如何取消冒泡呢？" class="headerlink" title="2.3 如何取消冒泡呢？"></a>2.3 如何取消冒泡呢？</h3><p>浏览器默认情况下是会冒泡的，当我们需要取消时，</p><p>方法一： 在定义的事件回调函数的后面加上 <code>return false</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'a被点击了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：通过事件对象 <code>event</code>取消</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'a被点击了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>event<span class="token punctuation">.</span> cancelBubble<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript从入门到高级笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的JavaScript笔记—— 一、var、let、const的区别?</title>
      <link href="/posts/2112bcd5.html"/>
      <url>/posts/2112bcd5.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是JavaScript？"><a href="#什么是JavaScript？" class="headerlink" title="什么是JavaScript？"></a>什么是JavaScript？</h1><p><code>首先,ECMAScript 和 JavaScript 什么关系？</code></p><ul><li>ECMAScript是一个国际通过的标准化脚本语言。</li><li><strong>JavaScript由ECMAScript和DOM、BOM三者组成</strong>。 可以简单理解为：ECMAScript是JavaScript的语言规范，JavaScript是ECMAScript的实现和扩展。</li></ul><hr><h1 id="一、var、let、const的区别"><a href="#一、var、let、const的区别" class="headerlink" title="一、var、let、const的区别"></a>一、var、let、const的区别</h1><h2 id="1-var声明变量存在变量提升，let和const不存在变量提升"><a href="#1-var声明变量存在变量提升，let和const不存在变量提升" class="headerlink" title="1. var声明变量存在变量提升，let和const不存在变量提升"></a>1. var声明变量存在<code>变量提升</code>，let和const不存在变量提升</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined  ===&gt;  a已声明还没赋值，默认得到undefined值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错：b is not defined  ===&gt; 找不到b这个变量</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错：c is not defined  ===&gt; 找不到c这个变量</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a=100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-let和const只能在块作用域里访问"><a href="#2-let和const只能在块作用域里访问" class="headerlink" title="2. let和const只能在块作用域里访问"></a>2. let和const只能在块作用域里访问</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment">// 报错：b is not defined  ===&gt; 找不到b这个变量</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment">// 报错：c is not defined  ===&gt; 找不到c这个变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-同一作用域下let和const不能声明同名变量，而var可以"><a href="#3-同一作用域下let和const不能声明同名变量，而var可以" class="headerlink" title="3. 同一作用域下let和const不能声明同名变量，而var可以"></a>3. 同一作用域下let和const不能声明同名变量，而var可以</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//控制台输出 100</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//控制台输出 10</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//  控制台报错：Identifier 'a' has already been declared  ===&gt; 标识符a已经被声明了。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-const定义常量，而且不能修改，但是在定义的对象时对象属性值可以改变"><a href="#4-const定义常量，而且不能修改，但是在定义的对象时对象属性值可以改变" class="headerlink" title="4. const定义常量，而且不能修改，但是在定义的对象时对象属性值可以改变"></a>4. const定义常量，而且不能修改，<code>但是在定义的对象时对象属性值可以改变</code></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> a<span class="token operator">=</span><span class="token number">2</span>a<span class="token operator">=</span><span class="token number">3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">//控制台报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token operator">:</span> <span class="token string">'make'</span><span class="token punctuation">,</span>    sex <span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'test'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment">//运行发现控制台没有报错，且 person.name 被成功修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code> ？？？？这是怎么回事呢？</code></p><blockquote><p>因为对象是引用类型的，person中保存的仅是<strong>对象的指针</strong>，而<strong>修改对象的属性不会改变对象的指针</strong>，所以这种情况就会修改成功。也就是说const定义的引用类型只要指针不发生改变，都是被允许的。</p></blockquote><p>接下来我们试着修改一下指针，<strong>让person指向一个新对象</strong>，最后<strong>果然报错</strong></p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>   name <span class="token operator">:</span> <span class="token string">'make'</span><span class="token punctuation">,</span>   sex <span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>   name <span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>   sex <span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token comment">//控制台报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><blockquote><ol><li>var定义的<strong>变量</strong>，<strong>变量提升</strong>，没有块的概念，<strong>可以跨块访问</strong>。</li><li>let定义的<strong>变量</strong>，<strong>只能在块作用域里访问</strong>，不能声明同名变量。</li><li>const用来定义<strong>常量</strong>，使用时<strong>必须初始化</strong>(即必须赋值)，不能声明同名变量，<strong>只能在块作用域里访问</strong>，而且<strong>不能修改</strong>，但是在定义的对象时对象属性值可以改变。</li><li><strong>他们都不能跨函数访问</strong></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript从入门到高级笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端初学者node会这些就可以了 Nodejs入门</title>
      <link href="/posts/9917d3f9.html"/>
      <url>/posts/9917d3f9.html</url>
      
        <content type="html"><![CDATA[<h1 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h1><h1 id="一、Nodejs介绍与安装"><a href="#一、Nodejs介绍与安装" class="headerlink" title="一、Nodejs介绍与安装"></a>一、Nodejs介绍与安装</h1><blockquote><p>介绍：</p><ol><li>Node 是一个让 JavaScript 运行在服务端的开发平台。</li><li><strong>简单的说 Node.js 就是运行在服务端的 JavaScript。</strong> Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。</li><li>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</li></ol></blockquote><p>总而言之：<br><font color="#FF4545">Node.js是可以脱离浏览器环境运行的JavaScript程序，且基于V8 引擎</font><br>下载地址： <a href="http://nodejs.cn/">http://nodejs.cn/</a><br>安装：默认安装，无脑下一步<br>查看是否安装成功：</p><pre class="line-numbers language-none"><code class="language-none">node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/c61e56a04b684137bb9fb86af3625f72.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYWRtaW5femxq,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>再命令行执行命令，如果出现版本号即为安装成功</p><h1 id="二、Nodejs入门"><a href="#二、Nodejs入门" class="headerlink" title="二、Nodejs入门"></a>二、Nodejs入门</h1><h2 id="1-运行的JavaScript程序"><a href="#1-运行的JavaScript程序" class="headerlink" title="1.运行的JavaScript程序"></a>1.运行的JavaScript程序</h2><p>1、创建 helloworld.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello World!!!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、命令行执行命令</p><pre class="line-numbers language-none"><code class="language-none">node helloworld.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果：hello world!!</p><h2 id="2-Node安装依赖包"><a href="#2-Node安装依赖包" class="headerlink" title="2.Node安装依赖包"></a>2.Node安装依赖包</h2><p>命令：</p><pre class="line-numbers language-none"><code class="language-none">npm install 依赖包名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">npm install mysql (安装mysql依赖)npm install vue (安装vue依赖)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h1 id="三、Node-实现请求响应（模拟Taomcat服务器）"><a href="#三、Node-实现请求响应（模拟Taomcat服务器）" class="headerlink" title="三、Node 实现请求响应（模拟Taomcat服务器）"></a>三、Node 实现请求响应（模拟Taomcat服务器）</h1><p>1、创建 httpserver.js ；</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// require是导入模块，这个模块是node内置模块,也可以是自定义模块</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建一个httpserver服务</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//浏览器将 以text-plain去解析数据。</span>    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'Content-type'</span><span class="token operator">:</span><span class="token string">'text/plain'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 浏览器输出的内容</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"&lt;h1&gt;hello word!!!&lt;/h1&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 监听端口8888</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"http://localhpst:8888 启动成功!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、运行服务器程序；</p><pre class="line-numbers language-none"><code class="language-none">node httpserver.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、在浏览器中输入：<a href="http://localhost:8888/">http://localhost:8888</a><br>4、停止服务：ctrl + c</p><pre class="line-numbers language-none"><code class="language-none">浏览器显示：hello word!!!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初学者福音 轻松拿捏Flex布局，附有九宫格案列</title>
      <link href="/posts/e2294b51.html"/>
      <url>/posts/e2294b51.html</url>
      
        <content type="html"><![CDATA[<h1 id="传统布局"><a href="#传统布局" class="headerlink" title="传统布局"></a>传统布局</h1><ul><li><p>基于盒状模型，依赖 display属性 + position属性 + float属性</p></li><li><p>对于那些特殊布局非常不方便，例如：垂直居中就不容易实现。</p><hr></li></ul><h1 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h1><ul><li><p><strong>Flex</strong>是Flexible Box的缩写，意为”<strong>弹性布局</strong>”，用来为盒状模型提供最大的灵活性。<br>  任何一个容器都可以指定为Flex布局。</p></li><li><p>采用Flex布局的元素，称为Flex容器。所有子元素为容器成员，称为flex item。</p></li><li><p>容器默认存在<strong>两根轴</strong>：水平的主轴（<strong>main axis</strong>）和垂直交叉轴（<strong>cross axis</strong>）。<br><font color="red"> 为了方便理解 我称水平主轴为横轴，垂直交叉轴为竖轴</font></p></li></ul><ol><li>主轴的开始位置(如图) ：<strong>main start</strong>，结束位置：<strong>main end</strong>；<ol start="2"><li>垂直交叉轴的开始位置：<strong>cross start</strong>，结束位置：<strong>cross end</strong>。（<strong>项目默认沿主轴排列</strong>）</li><li><strong>单个项目</strong>占据的主轴空间：<strong>main size</strong>，占据的交叉轴空间：<strong>cross size</strong>。</li></ol></li></ol><p><img src="https://img-blog.csdnimg.cn/82dc1e4aa41644b49505ba1fb9a6644a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYWRtaW5femxq,size_20,color_FFFFFF,t_70,g_se,x_16#pic_left" alt="在这里插入图片描述"></p><h2 id="一-容器-flex-container-的属性"><a href="#一-容器-flex-container-的属性" class="headerlink" title="一. 容器(flex-container)的属性"></a>一. 容器(flex-container)的属性</h2><p>以下6个属性是设置在容器上的。（<strong>注意：是flex-container的属性，不是flex-item的属性</strong>）</p><blockquote><ol><li>flex-direction </li><li>flex-wrap</li><li>flex-flow </li><li>justify-content</li><li>align-items</li><li>align-content</li></ol></blockquote><h3 id="1-1-flex-direction属性"><a href="#1-1-flex-direction属性" class="headerlink" title="1.1 flex-direction属性"></a>1.1 flex-direction属性</h3><p>flex-direction属性决定横轴的方向（即项目的排列方向）。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row | row-reverse | column | column-reverse<span class="token punctuation">;</span><span class="token punctuation">}</span>row（默认值）：横轴为水平方向，起点在左端。row-reverse：横轴为水平方向，起点在右端。column：横轴为垂直方向，起点在上沿。column-reverse：横轴为垂直方向，起点在下沿。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="https://img-blog.csdnimg.cn/8b9e2a9b653f47ffa518fa5450e6db44.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYWRtaW5femxq,size_20,color_FFFFFF,t_70,g_se,x_16#pic_left" alt="在这里插入图片描述"></p><h3 id="1-2-flex-wrap属性"><a href="#1-2-flex-wrap属性" class="headerlink" title="1.2 flex-wrap属性"></a>1.2 flex-wrap属性</h3><p>默认情况下，flex-item都排在一条线上。flex-wrap属性决定是否换行。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">{</span>  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> nowrap | wrap | wrap-reverse<span class="token punctuation">;</span><span class="token punctuation">}</span>nowrap（默认）：不换行wrap：换行，第一行在上方。wrap-reverse：换行，第一行在下方。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nowrap（默认）：<img src="https://img-blog.csdnimg.cn/337b2010f66948a28f237a3c56acfbf6.png#pic_left" alt="在这里插入图片描述">    </p><p>wrap：<br><img src="https://img-blog.csdnimg.cn/2867531d855040fd9166a1aa7bedd511.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYWRtaW5femxq,size_20,color_FFFFFF,t_70,g_se,x_16#pic_left" alt="在这里插入图片描述">wrap-reverse：<br><img src="https://img-blog.csdnimg.cn/25f06d4ddde14fac8181dfa28613b333.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYWRtaW5femxq,size_20,color_FFFFFF,t_70,g_se,x_16#pic_left" alt="在这里插入图片描述"></p><h3 id="1-3-flex-flow"><a href="#1-3-flex-flow" class="headerlink" title="1.3 flex-flow"></a>1.3 flex-flow</h3><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。<br>也就是说为了方便<strong>flex-flow可以同时控制这两种属性</strong><br><strong>(具体传参形式比较繁琐，不推荐)</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>  <span class="token property">flex-flow</span><span class="token punctuation">:</span> &lt;flex-direction&gt; &lt;flex-wrap&gt;<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-4-justify-content属性"><a href="#1-4-justify-content属性" class="headerlink" title="1.4  justify-content属性"></a>1.4  justify-content属性</h3><p>justify-content属性定义了<strong>flex-item</strong>在<strong>横轴</strong>上的<strong>对齐方式</strong>。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start | flex-end | center | space-between | space-around<span class="token punctuation">;</span><span class="token punctuation">}</span>flex-start（默认值）：左对齐flex-end：右对齐center： 居中space-between：两端对齐，项目之间的间隔都相等。space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/33895d61db914cca8456b2f0f48c1156.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYWRtaW5femxq,size_20,color_FFFFFF,t_70,g_se,x_16#pic_left" alt="在这里插入图片描述"></p><h3 id="1-5-align-items属性"><a href="#1-5-align-items属性" class="headerlink" title="1.5 align-items属性"></a>1.5 align-items属性</h3><p>align-items属性定义项目在<strong>竖轴</strong>上如何对齐。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span><span class="token punctuation">}</span>flex-start：竖轴的起点对齐。flex-end：竖轴的终点对齐。center：竖轴的中点对齐。<span class="token property">baseline</span><span class="token punctuation">:</span> flex-item 的第一行文字的基线对齐。stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/5cd0f93350524fd3848e6920e6b24e55.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYWRtaW5femxq,size_19,color_FFFFFF,t_70,g_se,x_16#pic_left" alt="在这里插入图片描述"></p><hr><h2 id="二、项目-flex-item-的属性"><a href="#二、项目-flex-item-的属性" class="headerlink" title="二、项目(flex-item)的属性"></a>二、项目(flex-item)的属性</h2><p>以下6个属性设置在项目上。</p><blockquote><ol><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>flex</li><li>align-self</li></ol></blockquote><h3 id="2-1-order属性"><a href="#2-1-order属性" class="headerlink" title="2.1 order属性"></a>2.1 order属性</h3><p>order属性定义<strong>flex-item</strong>的排列顺序。数值越小，排列越靠前，默认为0。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span>  <span class="token property">order</span><span class="token punctuation">:</span> &lt;integer&gt;<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/3338441983d74c1fbe43f884364d0395.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYWRtaW5femxq,size_20,color_FFFFFF,t_70,g_se,x_16#pic_left" alt="在这里插入图片描述"></p><h3 id="2-2-flex-grow属性"><a href="#2-2-flex-grow属性" class="headerlink" title="2.2 flex-grow属性"></a>2.2 flex-grow属性</h3><p>flex-grow属性定义flex-item的放大比例，默认为0。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span>  <span class="token property">flex-grow</span><span class="token punctuation">:</span> &lt;number&gt;<span class="token punctuation">;</span> <span class="token comment">/* default 0 */</span><span class="token punctuation">}</span>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/60e7a1ffd02a49f4aeaf7454f5d2c67f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYWRtaW5femxq,size_20,color_FFFFFF,t_70,g_se,x_16#pic_left" alt="在这里插入图片描述"></p><h3 id="2-3-flex-shrink属性"><a href="#2-3-flex-shrink属性" class="headerlink" title="2.3 flex-shrink属性"></a>2.3 flex-shrink属性</h3><p>flex-shrink属性定义了flex-item的缩小比例，默认为1。**(负值对该属性无效。)**<br>与放大类似，不赘述</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span>  <span class="token property">flex-shrink</span><span class="token punctuation">:</span> &lt;number&gt;<span class="token punctuation">;</span> <span class="token comment">/* default 1 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-4-flex-basis属性"><a href="#2-4-flex-basis属性" class="headerlink" title="2.4 flex-basis属性"></a>2.4 flex-basis属性</h3><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。<br><strong>简单的说就是设置flex-item的宽度</strong></p><p><strong><font color="#FF7B57">flex布局中宽度的优先级:min-width/max-width  &gt;  flex-basis  &gt;  width  &gt;  内容支撑</font></strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span>  <span class="token property">flex-basis</span><span class="token punctuation">:</span> &lt;length&gt; | auto<span class="token punctuation">;</span> <span class="token comment">/* default auto */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-5-flex属性"><a href="#2-5-flex属性" class="headerlink" title="2.5 flex属性"></a>2.5 flex属性</h3><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写。**(具体传参形式比较繁琐，不推荐)**</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> none | [ &lt;<span class="token string">'flex-grow'</span>&gt; &lt;<span class="token string">'flex-shrink'</span>&gt;? || &lt;<span class="token string">'flex-basis'</span>&gt; ]<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-6-align-self属性"><a href="#2-6-align-self属性" class="headerlink" title="2.6 align-self属性"></a>2.6 align-self属性</h3><p>align-self属性允许单个<strong>flex-item</strong>有与其他项目不一样的对齐方式，可覆盖align-items属性。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> auto | flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span><span class="token punctuation">}</span>取值与align-items相同<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/d0a2a2131e6c4b81965c1096bf249216.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYWRtaW5femxq,size_20,color_FFFFFF,t_70,g_se,x_16#pic_left" alt="在这里插入图片描述"></p><hr><p>​    </p><h2 id="三、九宫格案列"><a href="#三、九宫格案列" class="headerlink" title="三、九宫格案列"></a>三、九宫格案列</h2><blockquote><p><strong>学过flex布局，九宫格轻轻松松搞定！position，float 都不需要</strong></p><p><strong>相对于传统布局真的方便很多</strong></p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">.flex-box</span>        <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> space-evenly<span class="token punctuation">;</span>            <span class="token property">align-content</span><span class="token punctuation">:</span>space-evenly<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.flex-item</span>        <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.blue</span>        <span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.green</span>        <span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.orange</span>        <span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex-box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex-item orange<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex-item green<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex-item blue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex-item green<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex-item blue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex-item orange<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex-item blue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex-item orange<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flex-item green<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/9468253c896f4e99a0afd8e0aeb46ea9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYWRtaW5femxq,size_20,color_FFFFFF,t_70,g_se,x_16#pic_left" alt="在这里插入图片描述"></p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p><font color="#E33D10"><strong>本文参考菜鸟<a href="https://www.runoob.com/w3cnote/flex-grammar.html">https://www.runoob.com/w3cnote/flex-grammar.html</a> 编写，其中加入一些自己的想法，也有许多不同，也更加方便初学者理解</strong></font></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
            <tag> flex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H5的新特性</title>
      <link href="/posts/d873d49c.html"/>
      <url>/posts/d873d49c.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTML5新特性"><a href="#HTML5新特性" class="headerlink" title="HTML5新特性"></a>HTML5新特性</h1><p><strong>1.HTML5新特性（面试）</strong><br>            1）增加了audio和video音频播放，抛弃了Flash<br>            2）新增了canvas画布（绘画，制作动画（如小游戏开发等））<br>            3）地理定位<br>            4）增加了离线缓存<br>            5）硬件加速<br>            6）Web Socket（全双工通信）<br>            7）增加了本地存储<br>            8）新增了一些语义化标签</p><p><strong>2.网页布局标签</strong><br>            header:页首<br>            nav:导航栏<br>            aside:侧边栏<br>            main:主体<br>            section:区块<br>            article:文章<br>            footer:页尾</p><p><strong>3.语义化标签</strong><br>            1)mark:高亮显示(行级)<br>            2)details(描述)与summary(摘要):一般用于名词解释或用于封装一个区块等<br>            3)meter:定义度量衡<br>                        属性:value/min/max<br>            4)progress:进度条<br>                        属性:value/min/max<br>            5)dialog:对话框或窗口<br>            6)figure:用于对元素进行组合（一般用来组合一张图的标题、图片和图片描述等）</p><p><strong>4.HTML5多媒体</strong><br>            1)audio<br>                    播放音乐或音频。IE9以下的版本不支持。<br>                        a)支持的格式<br>                                .mp3/.ogg/.wav<br>                        b)属性<br>                                src:文件路径<br>                                autoplay:自动播放<br>                                loop:循环<br>                                controls:控制条<br>                                muted:静音<br>                                preload:预加载（当使用autoplay时，preload自动失效）<br>            2)video<br>                    加载视频。IE9以下的版本不支持。<br>                        a)支持的格式<br>                                .mp4/.ogg/.webm<br>                        b)属性<br>                                src:文件路径<br>                                autoplay:自动播放<br>                                loop:循环<br>                                controls:控制条<br>                                muted:静音<br>                                preload:预加载（当使用autoplay时，preload自动失效）<br>                                width:宽度<br>                                height:高度<br>                                poster:海报<br>            3)embed<br>                    嵌入内容或加载插件。<br>                        属性:<br>                                src:文件路径<br>                                width:宽度<br>                                height:高度<br>                                type:类型<br>            4)canvas<br>                    画布。是一个容器元素。<br>                    注意：<br>                            a.单独使用canvas没有什么意义，它必须结合Javascript使用。它的具体功能体现是通过Javascript体现现来的。<br>                            b.canvas的宽高最好不要通过css实现，而是直接使用标签属性width和height实现。</p><p><strong>5.HTML5常用属性</strong><br>            1）contentEditable<br>                    将标签转换为可编辑状态。可用于所有标签。它的值有true/false。<br>            2）hidden<br>                    对元素进行隐藏。一般用来传值或当某个条件成立，执行内容显示。默认值为hidden。<br>            3）data-*<br>                    用于存储页面或应用程序的私有自定义数据。一般用于传值。<br>            4）multiple<br>                    规定输入域中可选择多个内容。用于表单组件中，如file/select。<br>            5）required<br>                    约束表单元互在提交前必须输入值。用于表单组件中，需要结合提交按钮使用。<br>            6）pattern<br>                    用于验证输入字段的模式。用于表单组件中，需要结合提交按钮使用。</p><p><strong>6.表单组件</strong><br>            1）color：颜色<br>            2）email：邮箱<br>            3）tel：电话号码<br>            4）url：网址<br>            5）number：数字<br>            6）range：范围<br>            7）search：搜索<br>            8）date：日期<br>            9）datetime：日期时间<br>            10）datetime-local：本一日期时间<br>            11）year：年份<br>            12）month：月份<br>            13）time：时间</p><p><strong>7.表单属性</strong><br>            1）form-action:修改action数据提交的地方<br>            2）form-enctype:修改表单请求的类型<br>            3）form-method:修改数据提交的方法<br>            4）form:设置表单元素属于哪个表单<br>            5）novalidate:不验证</p><p><strong>8.input属性</strong><br>            1）autocomplete:自动完成<br>                        用来帮助用户输入，每一次输入的内容，浏览器是否保存输入的值，以备将来使用。值有：    on/off，默认为on。<br>            为了保护敏感数据（如用户帐号、密码等），避免本地浏览器对它们不安全存储，一般需要关闭。<br>            2）autofocus:自动获焦<br>            3）step:步长<br>            4）multiple:多选<br>            5）pattern:正则匹配<br>            6）placeholder:输入提示<br>            7）required:必须输入</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css3的新特性</title>
      <link href="/posts/a6d0cf2a.html"/>
      <url>/posts/a6d0cf2a.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSS3的新特性"><a href="#CSS3的新特性" class="headerlink" title="CSS3的新特性"></a>CSS3的新特性</h1><p><strong>1.CSS3是CSS2.1的一个升级版，它是对CSS的一个扩展。</strong></p><p><strong>2.CSS3的主要新特性：</strong><br>            1）选择器<br>            2）阴影<br>            3）形状转换（2D &lt;-&gt; 3D）<br>            4）变形<br>            5）动画（过渡动画、帧动画）<br>            6）边框<br>            7）多重背景<br>            8）反射<br>            9）文字<br>            10）颜色函数（rgba/hsl/hsla）<br>            11）滤镜（filter）<br>            12）弹性布局<br>            13）多列布局<br>            14）栅格布局<br>            15）盒模型<br>            16）Web字体<br>            17）媒体查询</p><p> <strong>3.CSS3不是属于浏览器或同一浏览器的不同版本都支持，所以需要兼容处理，通常的做法就是加厂商前缀。</strong><br>            1）主流浏览器内核（面试点）<br>                    a)Trident: IE内核<br>                    b)Webkit：Chrome和Safari内核<br>                    c)Gecko：FireFox内核<br>                    d)Blink（是Webkit的一个分支）： Chrome和Opera内核<br>            Tips（技巧）:目前国内的浏览器大多都是双核的（IE内核+Chrome内核）<br>            2）厂商前缀<br>                    IE： -ms-<br>                    Chrome&amp;Safari： -webkit-<br>                    FireFox： -moz-<br>                    Opera： -o-</p><p><strong>4.CSS3选择器</strong><br>           丰富选择的目的：在标签中减少class和id属性的使用。<br>            1）属性选择器<br>                    [属性名]<br>                [属性名=属性值]<br>                [属性名^=属性值]<br>                [属性名$=属性值]<br>                [属性名*=属性值]<br>            2）结构性伪类<br>                :first-child<br>                :last-child<br>                :nth-child(n)<br>                :nth-last-child(n)<br>                :nth-of-type(n)<br>                :nth-last-of-type(n)<br>                :only-child<br>                :only-of-type<br>                :empty<br>            3）目标伪类<br>                :target<br>            4）UI元素状态伪类<br>                :checked  (只在Opera浏览器中有效)<br>                :disabled<br>                :enabled<br>                :selection<br>            5）否定伪类<br>                :not()<br>            6）通用兄弟元素选择器</p><p> <strong>5.CSS3文本</strong><br>        1） 文本阴影（主流浏览器都支持，（IE9以上支持））<br>             text-shadow: 水平偏移距离 垂直偏移距离 [模糊距离] [阴影的尺寸] [颜色] [inset];<br>        2）文本自动换行（主流浏览器都支持）<br>             word-wrap: normal|break-word;<br>        3）单词拆分（主流浏览器都支持）<br>             word-break: normal|break-all|keep-all;<br>        4）文本拆分（所有主流浏览器都不支持）<br>            text-wrap: normal|none|unrestricted|suppress;<br>        5）文本溢出<br>            a)单行文本溢出（重要）<br>                text-overflow: clip|ellipsis|string;</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"> a)处理文字溢出样式：                width: px/%/em/rem...;                white-space: nowrap; /* 为允许折行 */                -ms-text-overflow: ellipsis; /* 处理IE兼容 */                text-overflow: ellipsis;                overflow: hidden;b)多行文本溢出（IE9以下的版本不支持，主要是谷歌支持）            width: px/%/em/rem...;            display: -webkit-box;            -webkit-box-orient: vertical;            -webkit-line-clamp: 行数;            overflow: hidden;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6.CSS3边框</strong><br>            1）圆角边框（掌握）<br>                 border-radius: 1-4 length|% / 1-4 length|%;<br>                四个方位的词：top-left/top-right/bottom-left/bottom-right<br>            2）边框阴影（IE9以上支持）<br>                box-shadow: 水平偏移距离 垂直偏移距离 [模糊距离] [阴影的尺寸] [颜色] [inset];<br>            3）边框图片(IE11.0及以后版本支持）<br>                border-image：图片 向内偏移距离 宽度 图像区域超出边框的距离 重复效果;<br>                重复效果：round/strech/repeat</p><p><strong>7.CSS3背景</strong><br>            1）多重背景<br>                background: 背景色 背景图片 平铺方式 位置,背景色 背景图片 平铺方式 位置,…<br>            2）background-size：设定背景图像的尺寸。<br>                background-size: 固定长度|百分比值|cover|contain;<br>            3）background-origin：指定背景图像的位置区域。<br>                background-origin: padding-box|border-box|content-box;<br>            4）background-clip：设定背景的绘制区域。<br>                background-clip: border-box|padding-box|content-box;<br>            5）渐变背景<br>                background-image: 线性渐变｜径向渐变</p><p><strong>8.CSS3颜色函数</strong><br>            1）RGBA<br>                rgba(r,g,b,a)<br>                r:红色        取值范围：0-255/0-100%<br>                g:绿色        取值范围：0-255/0-100%<br>                b:蓝色        取值范围：0-255/0-100%<br>                a:不透明度    取值范围：0-1的一个小数<br>            2）HSL<br>                hsl(h,s,l)<br>                h:色调        取值范围：0-360<br>                s:饱和度      取值范围：0-100%<br>                l:亮度        取值范围：0-100%<br>            3）HSLA<br>                hsla(h,s,l,a)<br>                h:色调        取值范围：0-360<br>                s:饱和度      取值范围：0-100%<br>                l:亮度        取值范围：0-100%<br>                a:不透明度    取值范围：0-1的一个小数</p><p><strong>9.opacity</strong><br>            调整元素的不透明度，大多数情况下用于做元素的遮罩效果。取值范围：0-1的一个小数 IE8及8以下版本不支持opacity，处理兼容的方式，再添加一行代码来处理不透明度：filter:alpha(opacity=数值）    数值的范围：0-100</p><p><strong>10.CSS3渐变</strong><br>            渐变主要用来设置背景或制作三维图。<br>            1）线性渐变<br>                background: linear-gradient(方向或角度, 颜色1 百分比, 颜色2 百分比, …);<br>                方向：<br>                    to left:从右向左渐变<br>                    to right:从左向右渐变<br>                    to top:从下向上渐变<br>                    to bottom:从上向下渐变<br>                    to top left:从右下角向左上角渐变<br>                    to top right:从左下角向右上角渐变<br>                    to bottom left:从右上角向左下角渐变<br>                    to bottom right:从左上角向右下角渐变<br>                角度：<br>                    比如45度角，应该表示为：45deg<br>                颜色取值：<br>                    1）表示颜色的单词<br>                    2）16进制颜色<br>                    3）表示颜色的函数（rgb()/rgba()/hsl()/hsla()…)<br>            2）径向渐变(沿半径方向渐变）<br>                background: radial-gradient(形状 渐变大小 at 位置,颜色1 百分比, …, 颜色n 百分比);<br>                形状：<br>                    ellipse:椭圆径向渐变（默认）<br>                    circle:圆径向渐变<br>                渐变大小：<br>                    farthest-corner:渐变的半径长度为从圆心到离圆心最远的角（默认）<br>                    closest-side:渐变的半径长度为从圆心到离圆心最近的边<br>                    closest-corner:渐变的半径长度为从圆心到离圆心最近的角<br>                    farthest-side:渐变的半径长度为从圆心到离圆心最远的边<br>                位置：<br>                    center:设置圆心在中心位置（默认）<br>                    top:设置圆心在顶部位置<br>                    bottom:设置圆心在底部位置<br>                    at 圆心橫坐标 圆心纵坐标: 设定圆心的位置在指定的（橫坐标，纵坐标）处<br>            3）文字渐变<br>                background-image: 线性渐变或径向渐变;<br>                -webkit-background-clip: text;<br>                -webkit-text-fill-color: transparent;</p><p><strong>11.box-sizing</strong><br>            允许你以某种方式定义某些元素，以适应指定的区域。<br>            box-sizing: content-box/border-box （火狐和谷歌低版本需要厂商前缀）</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> 前端 </tag>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/posts/d95d7e09.html"/>
      <url>/posts/d95d7e09.html</url>
      
        <content type="html"><![CDATA[<p>相遇皆是缘分</p><h3 id="为什么建博客？"><a href="#为什么建博客？" class="headerlink" title="为什么建博客？"></a>为什么建博客？</h3><p>作为一个即将工作的大学生，我觉得建一个自己的博客来记录自己的学习过程就很nice！！！</p><h3 id="展望博客"><a href="#展望博客" class="headerlink" title="展望博客"></a>展望博客</h3><p>我会把自己学习过程的笔记和一些记忆犹新的<code>bug</code>上传到这里来。</p><p>拜拜</p><p>完结撒花</p>]]></content>
      
      
      <categories>
          
          <category> 博主 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
